name: build v2

on:
  workflow_dispatch:
    inputs:
      versionBump:
        description: 'The part of the version to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor

  push:
    branches:
      - release-v2
    paths-ignore:
      - 'docs/**'
      - 'INTHEWILD.md'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/**'
      - checkov/version.py
      - kubernetes/requirements.txt
      - coverage.svg
      - '.swm/**'
      - '.pre-commit-config.yaml'

permissions:
  contents: read

concurrency:
  group: 'build'
  cancel-in-progress: true

jobs:
  security:
    uses: ./.github/workflows/security-shared.yml
    secrets: inherit

  integration-tests:
    strategy:
      fail-fast: true
      matrix:
        python: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v3
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236  # v4
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d  # v3
      - uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78  # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: imranismail/setup-kustomize@a76db1c6419124d51470b1e388c4b29476f495f1  # v2
        if: ${{ runner.os != 'windows' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Build & install checkov package
        run: |
          # remove venv, if exists
          pipenv --rm || true
          pipenv --python ${{ matrix.python }}
          pipenv run pip install pytest pytest-xdist
          pipenv run python setup.py sdist bdist_wheel
          bash -c 'pipenv run pip install dist/checkov-*.whl'
      - name: Clone Terragoat - vulnerable terraform
        run: git clone https://github.com/bridgecrewio/terragoat
      - name: Clone Cfngoat - vulnerable cloudformation
        run: git clone https://github.com/bridgecrewio/cfngoat
      - name: Clone Kubernetes-goat - vulnerable kubernetes
        run: git clone https://github.com/madhuakula/kubernetes-goat
      - name: Clone kustomize-goat - vulnerable kustomize
        run: git clone https://github.com/bridgecrewio/kustomizegoat
      - name: Create checkov reports
        run: |
          # Just making sure the API key tests don't run on PRs
          bash -c './integration_tests/prepare_data.sh "${{ matrix.os }}" "${{ matrix.python }}"'
        env:
          LOG_LEVEL: INFO
          BC_KEY: ${{ secrets.BC_API_KEY }}
          TF_REGISTRY_TOKEN: ${{ secrets.TFC_TOKEN }}
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      - name: Run integration tests
        run: |
          pipenv run pytest integration_tests
  prisma-tests:
    runs-on: [ self-hosted, public, linux, x64 ]
    env:
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v3
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236  # v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Clone Terragoat - vulnerable terraform
        run: git clone https://github.com/bridgecrewio/terragoat
      - name: Build & install checkov package
        run: |
          # remove venv, if exists
          pipenv --rm || true
          pipenv --python ${{ env.PYTHON_VERSION }}
          pipenv run pip install pytest pytest-xdist
          pipenv run python setup.py sdist bdist_wheel
          pipenv run pip install dist/checkov-*.whl
      - name: Run checkov with Prisma creds
        env:
          PRISMA_KEY: ${{ secrets.PRISMA_KEY }}
          PRISMA_API_URL: ${{ secrets.PRISMA_API_URL }}
        run: |
          pipenv run checkov -s -d terragoat --bc-api-key "$PRISMA_KEY" --repo-id yuvalyacoby/terragoat > checkov_report_prisma.txt
          grep "prismacloud.io" checkov_report_prisma.txt
          exit $?
  unit-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236  # v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78  # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: imranismail/setup-kustomize@a76db1c6419124d51470b1e388c4b29476f495f1  # v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          # remove venv, if exists
          pipenv --rm || true
          pipenv --python ${{ env.PYTHON_VERSION }}
          pipenv install --dev
      - name: Test with pytest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run python -m pytest tests
  bump-version:
    needs: [integration-tests, unit-tests, prisma-tests]
    runs-on: [self-hosted, public, linux, x64]
    environment: release
    permissions:
      contents: write
      # IMPORTANT: this permission is mandatory for trusted publishing to pypi
      id-token: write
    timeout-minutes: 30
    env:
      PYTHON_VERSION: "3.8"
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v3
        with:
          token: ${{ secrets.GH_PAT_SECRET }}
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@82a020f1f7f605c65dd2449b392a52c3fcfef7ef  # v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236  # v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          # remove venv, if exists
          pipenv --rm || true
          pipenv --python ${{ env.PYTHON_VERSION }}
          pipenv install
      - name: Calculate version
        run: |
          git fetch --tags --force
          # find the latest v2 tag
          latest_tag="$(git tag --sort=v:refname | grep "^2\." | tail -n 1)"
          echo "latest tag: $latest_tag"
          if [[ -z "${{ inputs.versionBump }}" ]]
          then
            version="patch"
          else
            version="${{ inputs.versionBump }}"
          fi
          case $version in
            minor)
              new_tag=$(echo "$latest_tag" | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b+1 , 0)}')
              ;;
            patch)
              new_tag=$(echo "$latest_tag" | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b , $3+1)}')
              ;;
          esac

          echo "new tag: $new_tag"
          echo "version=$new_tag" >> "$GITHUB_OUTPUT"
        id: calculateVersion
      - name: sleep and wait for package to refresh
        run: |
          # just to make sure, we will create the right version
          sleep 2m
      - name: version
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git pull
          
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          new_tag=${{ steps.calculateVersion.outputs.version }}
          echo "new tag: $new_tag"
          ## update python version
          echo "version = '$new_tag'" > 'checkov/version.py'

          git commit --reuse-message="HEAD@{1}" checkov/version.py || echo "No changes to commit"
          git push origin
          git tag "$new_tag"
          git push origin "$new_tag"
        id: version
      - name: create python package
        run: |
          pipenv run python setup.py sdist bdist_wheel
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@b7f401de30cb6434a1e19f805ff006643653240e  # v1
    outputs:
      version: ${{ steps.calculateVersion.outputs.version }}
